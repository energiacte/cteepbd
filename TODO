# TODO

- check whether `#[non_exhaustive]` could be useful for some enums (Service?)
- maybe bug: see why emissions for ACS for the manual's example change
  depending on whether nearby factors are used or not.
- Aclarar la definición de cogeneración (imputación de combustible a uso cogeneración con destino/servicio COGEN). Ver impacto en resto de cálculos.

- cte

  - remove obsolete `acsnrb` option (fraccion_renovable_acs is unconditionally computed and added to JSON)
  - wfactors.normalize(defaults): ver si quitamos de aquí los valores por defecto y así podemos generar de forma más ergonómica los factores de paso sin usar wfactors_from_loc
    `CTE_LOCWF_RITE2014.get(loc)?.set_user_wfactors(&user_wf).normalize(&default_user_wf);`
  - Cambiar salida XML:
    - No se ha serializado los datos de Zona y Sistemas, y Sería
    - mejor usar en vez de <Dato>: <Factor> o <Energia>.
    - Eliminar un nivel de etiquetas, dejando todo como una secuencia de <Metadato>, <Factor>, <Consumo>, <Produccion>, <DemandaZona>, <DemandaSistema>

- epbd:

  - set a standard negative number to refer to reference systems (e.g. -999)
  - define NEPB as a new service
    - define EPB_SERVICES = [CAL, REF, ...] and add is_nepb() and is_epb() using this;
    - remove NEPB (csybtype) and consumed energy component would not need Ctype and CSubtype
  - define COGEN as a new service for energy used for cogeneration
    - how does it relate to EPB and NEPB services? (where is it accounted for? review filtering in code)
  - Define subtypes of generation (INSITU, COGEN) and use these as subtypes for energy generation components
    - If we could eliminate these we could convert all used and generated energy to a single basic struct
      { id, service, values, comment } but we don't want to mix services and type of generated energy.
  - Define more component types:
    - Energy losses linked to service X (Q_X_ls)
      - E_X_Y_in * COP = Q_X_Y_out + Q_X_ls_tot - Q_X_y_in - f_Y;aux;rvd * W_X_Y_aux (EN 15316-4-2:2019, formula 1, DHW, HEATING)
      - Energy_use * COP = Energy_out + Energy_losses - (Energy_from_heat_source_input + Energy_from_recovered_aux_energy_not_accounted_for_in_COP_input)
      - PERDIDAS
    - Number of hours where temperature shedule limits are not met (CAL, REF)
      - HORASFUERACONSIGNA
  - allow using load matching factor values (or functions) that are not 1 (formula 32, B.32)
    Have a look to the proposed value from the TR.
  - allow to assign produced energy to services (instead of generic imputation).
    This has an effect on the computation of the share of produced energy, which should proceed after discounting the produced energy to specific services.

- tests:

  - cte: check non matching computation modes in component metadata and weighting factors metadata

- output:
  - Additional JSON output generated from the zone (ZONA) and system (SISTEMA) data
    - Energy needs (with annual totals)
    - System (by_id) efficiencies / indicators
    - ¿Whole building efficiencies by service (non renewable primary energy)?
    - Fraction of energy use covered by renewable sources, by service and by system (id)
    - ReduccionEPNR y ReduccionEmisiones
    - demanda por servicios y total (¿y demanda de referencia si la hay?)
    - valores totales de los distintos indicadores (Ver BalanceEPB nuevo)
    - e.final
      - De todos los servicios y desglosado por servicio
    - balance B, balance A, AB: ren, nren, tot, emisiones.
      - De todos los servicios y desglosado por servicio
    - emisiones, desglose eléctrico y no eléctrico
    - Calcular % de cobertura renovable (consumo EF y demanda) para los distintos servicios
    - Calcular ReduccionEPNR y ReduccionEmisiones por uso de renovables
  - Split XML output, generated from JSON results

## Wishlist

- use templates for output (plain, detailed, ...) depending on cli parameter
